Alright, so let's take the subset sum problem. Say that we take the set:

[3, 34, 4, 12, 13, 5, 2]

And let's say that we have a target sum of 25. First, we gotta sort the set in ascending order. So it will look like:

[2, 3, 4, 5, 12, 13, 34]

Now, we take the target sum, which is 25. We ignore every single element that's bigger than 25. So we will have the elements in the set:

[2, 3, 4, 5, 12, 13].

Now, here's what we're going to do. We're gonna iterate through the array and look at the set. We're gonna start with the first element, which is 2. We check to see if it's smaller than the target sum. It is. Therefore, we will take 2 and add it with the next element in the set, which is 3. So 2 + 3 = 5. Check if it's smaller than the target sum. It still is. We take the next element, which is 4 and add it together with 5. So 5 + 4 = 9. It's smaller than the target, therefore we continue with the next element, which is 5, and add it together with 9, so 9 + 5 = 14. It's still smaller than the target, therefore we take the next element, which is 12 and add it together. 14 + 12 = 26. This time, however, the sum is bigger than the target sum. If it were equal to the target sum, we would have output the message "True". But this time, we have a sum that's bigger than the target sum. Therefore we stop, and we take the element that we tried to sum with, which was 12 and check it like this. We take 12. We have the target sum 25. We do a subtraction between them and we have 25 - 12 = 13. We ignore everything that's bigger than 12 and just check with every single element smaller than 12. 13 is bigger than 12, therefore 13 is bigger than every element that's smaller than 12 in the set. So then, we must take the previous sum that we had before, which was 14 and subtract it with the subtraction that we had before, which is 13. So 14 - 13 = 1. But as we can see, 1 is smaller than every single element in the set. Therefore, we cannot perform a sum with the number 12. So we move on to the next number, which is 13. We take the target sum and subtract it with this number. So 25 - 13 = 12. We check the elements that are less than 13 and check to see if we can get the subtraction to 0. We check to see if there are any elements that are smaller than or equal to 12. As we can see, the biggest number that is smaller than or equal to 12, is in fact 12. Therefore we take 12 and subtract it with 12. So 12 - 12 = 0. Therefore, there exists a subset that is equal to the target sum, so the output of the program will be "True". If none of the elements in the set would have had the subtraction equal to 0, we would have had to output the message "False". Let me show you another example of how this is supposed to work. Suppose we have another set:

[20, 80, 680, 4000, 15000]

And the target sum is 15700. We do the same thing as we did before. First element is 20. It's smaller than the target sum, therefore we add it with the next element, which is 80. 20 + 80 = 100. Smaller than the target, therefore we add the next element. 100 + 680 = 780. Smaller than the target, therefore we try to add the next element. 780 + 4000 = 4780. Smaller than the target so we add the next element. 4780 + 15000 = 19780. It's much bigger than the target, therefore we're going to stop at 15000. We take the target sum and subtract the element. We will have 15700 - 15000 = 700. We check to see the biggest number before 700. It's 680. We are going to subtract 700 with 680. 700 - 680 = 20. We check to see any sum that's smaller than or equal to 20. We have the element 20. So 20 - 20 = 0. Therefore the output of the program will be "True". If we had for instance, 15710 for example and we did the same thing as before, we would have had the remainder 10, which is smaller than every single element in the set and therefore the output of the program would be "False".

Write the code in Python and make it so that you can input the arrays in a text file. Make it so that you input the arrays as 1 2 3 4 5 and not [1 2 3 4 5]. Tell me the time complexity of this program.
