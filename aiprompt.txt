Alright, let's say that we have an input file with arrays. For example:
  [1 2 3 4 5]
  [-1 -2 -3 -4 -5]
  [1 -2]
  [3 -4 5]
  [5]
  [-1 2]
  [1 -1 2]
  [1 3]
  [1 4]

First, find the highest element in all the arrays and put it in an integer called "n". So for our example, we see that the highest number is 5, therefore we put n = 5.
In our input, we have 9 arrays. Our algorithm will work like this: Let's take the sample array from above. We're gonna start with [1 2 3 4 5]. This is the first part that we want to do. First, we're gonna eliminate any arrays that have all the elements common in-between them. I'll show you what I mean by this but do this in the fastest way possible. So we have [1 2 3 4 5] and [5]. All the elements between the arrays are common between each other, because 5 is included in [1 2 3 4 5], therefore [1 2 3 4 5] must be eliminated. [5] does not get eliminated because  it's the smaller array. We always eliminate the bigger array between each other. We can find many that satisfy this behavior, like [1 2 3 4 5] and [1 3] are the same, or [1 2 3 4 5] and [1 4]. They fit the same condition, but you always eliminate the bigger array. Next we have [-1 -2 -3 -4 -5], but we can't find any arrays that have the elements common with each other. We have [-1 2], one element is common between them but not all of them are in common between them. If it were [-1 -2 -3 -4 -5] and [-5], or [-1 -2 -3 -4 -5] and [-1 -2] or [-1 -2 -3 -4 -5] and [-1 -3] for example, the elimination process would go and you would always delete the bigger array, which is [-1 -2 -3 -4 -5], but that isn't happening in our case so we move on. We do this for every array in part. Here's something of note. If you find dupe arrays, such as [1 2] and [2 1], you eliminate one of them, so you will have [1 2] instead. Or, if you find something like [1 -1 2], you eliminate the entire array because you have both the negative and positive value of the same integer, which is 1 and -1, and we are not allowed to do that, therefore you delete the entire array. If you have for example the array [1 1 2], you dedupe it to [1 2]. With that said, if you did the steps from before, we should now have the arrays:

[-1 -2 -3 -4 -5]
[1 -2]
[5]
[-1 2]
[1 3]
[1 4]

Now, here comes the second part that you need to do. This will be the counting part. Here's what we're gonna do. We will iterate through the series of arrays and do this. First array is [-1 -2 -3 -4 -5]. We try to see if there are any previous arrays before this array. There are no previous arrays, therefore we will take a sum, which will be a global variable and it starts at 0 and we will add this sum with 2^(n-k), with n being the highest element in the series of arrays, which is 5 and k is the length of the current array that we're on, which is also 5. So 2^(n-k) = 2^(5-5) = 2^(0) = 1. We will add the sum with 1. Next array is [1 -2]. First, we check to see if there are any previous arrays. There are. The previous array is [-1 -2 -3 -4 -5]. Now, what we want to do is check and see if we can perform an intersection between [1 -2] and [-1 -2 -3 -4 -5]. An intersection can be performed if and only if there are no conflicting integers between each other, like for example, 1 and -1. In our case, we can't perform an intersection between [1 -2] and [-1 -2 -3 -4 -5] because we have conflicting integers between the arrays in the form of 1 and -1. Therefore an intersection cannot be performed. We don't have any other previous arrays to check and there has been no intersection performed, therefore we will take [1 -2], take the sum and add it with 2^(n-k), with k in this case being 2, so 2^(5-2) = 2^(3) = 8. So sum = 1 + 8 = 9. Next array is [5]. First, let's check the previous arrays to see with who can we perform an intersection with. [5] can intersect with [1 -2] because there are no conflicting integers but [5] cannot intersect with [-1 -2 -3 -4 -5] because we have conflicting integers in the form of 5 and -5. Therefore, we will perform an intersection between [5] and [1 -2]. Now, here's how it works. We take [5], first we check to see if the array [1 -2] has more elements than [5]. If it does, we will perform a subtraction. If it had an equal amount of elements, we had to also perform a subtraction. If it had less elements, we would have had to perform an addition instead. In our case, [1 -2] has more elements in the array than [5]. So, we will take the count of [5], which will be 2^(n-k), k in this case being 1, so 2^(5-1) = 2^(4) = 16, then we create a merged array, which is temporary between [5] and [1 -2]. We will merge the elements between the arrays together without any dupes, so we will get the merged array [1 -2 5]. This array will have the count of 2^(n-k) = 2^(5-3) = 2^(2) = 4. Now, we subtract the count of [5] and the count of [1 -2 5], so we will have 16 - 4 = 12. We don't have any other arrays to check, because we've already performed the intersections that we had to do. So we will take the final count of 12 and add it to the global sum. And we will have sum = 9 + 12 = 21. Remember, you do not count [5] itself in this case because [5] has performed an intersection and we will not count the array. Only if [5] couldn't intersect with any array, do we count the sum with 2^(n-k). Now, we will move on to the next array, which is [-1 2]. We check and see the previous arrays to see with which arrays can [-1 2] intersect with. [-1 2] can intersect with [5], but not with [1 -2] and [-1 -2 -3 -4 -5] because they have conflicting integers. First, we check if the array [5] has more elements than [-1 2]. It does not, it's smaller in the amount of elements than [-1 2]. Therefore, we shall perform a subtraction. We take the array [-1 2] and do its count, which is 2^(5-2) = 2^(3) = 8, and we make a new merged array between [-1 2] and [5], which is [-1 2 5] and do its count, which will be 2^(5-3) = 2^(2) = 4. So now, we will perform the subtraction between the count of [5] and the count of [-1 2 5], which is 8 - 4 = 4. We have finished intersecting all the arrays and we have a final count of 4. Therefore we will take the final count and add it to the sum, and we will have sum = 21 + 4 = 25. Next array on our list is [1 3]. We check and see which arrays can [1 3] intersect with. [1 3] can intersect with [5] and [1 -2]. This time, we have multiple arrays to intersect. The procedure will work like this. We take [1 3] with [5] first, check to see if [5] is bigger or smaller in the number of elements than [1 3]. It's smaller, therefore a subtraction will be performed between [1 3] and the merged array [1 3 5]. The count of [1 3] is 2^(5-2) = 2^(3) = 8 and the count of the merged array [1 3 5] is 2^(5-3) = 2^(2) = 4. So the subtraction will be 8 - 4 = 4. But the count is not done yet, we still have arrays left to intersect, which is [1 -2]. But this time, we take the merged array [1 3 5] and intersect it with [1 -2]. We check to see if [1 -2] is smaller, equal or bigger than [1 3 5]. It's smaller, therefore we shall perform a subtraction between [1 3 5] and the merged array that we will perform between [1 3 5] and [1 -2], which is [1 -2 3 5]. The count of [1 3 5] is 2^(5-3) = 2^(2) = 4 and the count of [1 -2 3 5] is 2^(5-4) = 2^(1) = 2. So the subtraction will be 4 - 2 = 2. We have intersected every single array, so now we will take the final count of 2 and add it to the sum, and the sum will equal to 25 + 2 = 27. Next array is [1 4]. We check the previous arrays for any intersections. [1 4] can intersect with [1 3], [5] and [1 -2]. We perform the same thing as before. First, [1 4] and [1 3]. We compare them, they have an equal number of elements. That means we'll perform a subtraction between [1 4] and the merged array [1 3 4]. So [1 4]'s count is 2^(5-2) = 8, while [1 3 4]'s count is 2^(5-3) = 4. So we will perform the subtraction and get 8 - 4 = 4. This will be the count for the new merged array [1 3 4]. Now we take the merged array [1 3 4] and compare it to the other arrays left to intersect, which are [5] and [1 -2]. Next is [5]. [5] is smaller than [1 3 4] therefore we will perform a subtraction between [1 3 4] and the merged array [1 3 4 5]. [1 3 4]'s count is 4, because we took the count from before, while [1 3 4 5]'s count is 2. We perform the subtraction between the two and we get 4 - 2 = 2. Now, we take the array [1 3 4 5], which will have a count of 2 and check with [1 -2]. [1 -2] has smaller elements, therefore we will take the merged array between [1 3 4 5] and [1 -2] which is [1 -2 3 4 5], which has a count of 1 and do the subtraction between [1 3 4 5] and [1 -2 3 4 5], so 2 - 1 = 1. Now, there are no more arrays left to intersect, so we will have a final count of 1. We will add this final count to the sum and we will have sum = 27 + 1 = 28. There are no more arrays after [1 4], so the final sum will be 28.

There are 2 things I'd like to note. But we'll have to take 2 series of arrays to understand: First, let's take the sample series of arrays:

[1 2]
[1 3]
[1 4]
[1 5]
[2 3]

And we are at [2 3]. [2 3] can intersect iwth [1 5], [1 4], [1 3], [1 2]. We compare [2 3] and [1 5] together. They have the same amount of elements, therefore we perform a subtraction between the count of [2 3] and the merged array [1 2 3 5]. [2 3]'s count is 2^(5-2) = 2^(3) = 8 and [1 2 3 5]'s count is 2^(1) = 2. So 8 - 2 = 6. Now, we take the merged array [1 2 3 5] and compare it with [1 4]. [1 4] has a smaller amount than [1 2 3 5], therefore we will take the count of [1 2 3 5], which is 6 and take the count of the merged array [1 2 3 4 5], which is 2^(5-5) = 2^(0) = 1. So 6 - 1 = 5. Now, we take the merged array [1 2 3 4 5], which has a count of 5 now and compare it with [1 3]. Here comes a step that I've missed. We have to check and see if all the elements between [1 2 3 4 5] and [1 3] are all included within each other. So [1 3] has all the elements included in [1 2 3 4 5]. Therefore the condition is satisfied. So, here's what we're gonna do. We will take the count from [1 2 3 4 5], which is 5 and add this with the subtraction between the count of [1 3], which is 8 and the count of [1 2 3 4 5], which is 5, we don't give [1 2 3 4 5] the value of 2^(n-k) here because [1 2 3 4 5] already has a count. So we will have the operation 5 + 8 - 5 = 5 + 3 = 8. And the merged array [1 2 3 4 5] will get replaced with the array [1 3], which will have a count of 8. We still have one more array left to intersect, which is [1 2]. We will intersect these together. We will have [1 3] and [1 2]. They have an equal amount, so we will have [1 3]'s count, which is 8 and subtract it with the merged array [1 2 3], which is 4. The new count will be 8 - 4 = 4. Now, there are no more arrays left to intersect, so we will take this count and add it to the sum, whichever it may be.

Now, here's the second thing to note: Let's take another sample series:

[-1 3]
[1 2]
[-2]
[4 5]
[-4 -5]

And we start at [4 5]. [4 5] can intersect with [-2], [1 2] and [-1 3]. We take [4 5] and intersect it with [-2]. [-2] is smaller than [4 5], therefore we perform a subtraction. If it were bigger, you would have performed an addition. So [4 5]'s count is 8, while the merged array [-2 4 5] has a count of 4. Perform the subtraction and the new count will be 8 - 4 = 4. We take the new merged array [-2 4 5] with the new count, which is 4 and we check and see if we can perform an intersection between [-2 4 5] and [1 2]. This time, we have conflicting integers between the arrays. That's why it's a special case. If we have conflicting integers between the arrays, then we take the initial array, which was [4 5] and compare it with [1 2]. They have an equal amount of elements, but this time, we won't take the count from [4 5], but instead we take the count that we got from the merged array [-2 4 5] and subtract it with the count from the merged array [1 2 4 5], so we will have 4 - 2 = 2. Now, we have 2 merged arrays that we need to take care of: [-2 4 5] and [1 2 4 5] that have a unified count of 2. We have one more array left to check to intersect, which is [-1 3]. We take the first merged array, [-2 4 5] and see if it intersects with [-1 3]. It does, and [-1 3] has a smaller amount than [-2 4 5]. Therefore we will take [-2 4 5]'s count and subtract it with the merged array [-1 3 4 5], which is 2. So 4 - 2 = 2. Now we have 2 merged arrays: [-1 3 4 5] and [1 2 4 5] with a unified count of 1. There are no more arrays left to intersect and the merged arrays cannot intersect with each other. Therefore, we will take the unified count and then add it to the sum, whichever it may be. This is all for the second part.

Now, here comes the third part. We must check to see if the global sum is equal to 2^(n), so 2^(5) = 32. If the global sum is equal to 2^(n), then you must output the message "This is incorrect". If it's not equal to 2^(n), then you will output the message "This is correct". In our case, our sum is not equal to 2^(n), so therefore we will output the message "This formula is satisfiable". Output the sum as well.

Write the code in Python, make sure to input the arrays from a text file and tell me the time complexity of this program. Make it so that you can input the arrays like 1 2 3 4 5 and not [1 2 3 4 5], like in brackets.
